"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commands = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _dom = require("@testing-library/dom");

var _utils = require("./utils");

const getDefaultCommandOptions = () => {
  return {
    timeout: Cypress.config().defaultCommandTimeout
  };
};

const commands = Object.keys(_dom.queries).map(queryName => {
  return {
    name: queryName,
    command: (...args) => {
      const lastArg = args[args.length - 1];
      const defaults = getDefaultCommandOptions();
      const waitOptions = typeof lastArg === 'object' ? (0, _extends2.default)({}, defaults, lastArg) : defaults;
      const queryImpl = _dom.queries[queryName];

      const baseCommandImpl = doc => {
        const container = (0, _utils.getContainer)(waitOptions.container || doc);
        return (0, _dom.waitForElement)(() => queryImpl(container, ...args), (0, _extends2.default)({}, waitOptions, {
          container
        }));
      };

      let commandImpl;

      if (queryName.startsWith('queryBy') || queryName.startsWith('queryAllBy')) {
        commandImpl = doc => baseCommandImpl(doc).catch(() => doc.querySelector('.___cypressNotExistingSelector'));
      } else {
        commandImpl = doc => baseCommandImpl(doc);
      }

      const thenHandler = new Function('commandImpl', `
            return function Command__${queryName}(thenArgs) {
              return commandImpl(thenArgs.document)
            }
          `)(commandImpl);
      return cy.window({
        log: false
      }).then({
        timeout: waitOptions.timeout + 100
      }, thenHandler).then(subject => {
        Cypress.log({
          $el: subject,
          name: queryName,
          message: args.filter(value => {
            if (Array.isArray(value) && value.length === 0) {
              return false;
            }

            if (value instanceof RegExp) {
              return value.toString();
            }

            if (typeof value === 'object' && Object.keys(value).length === 0) {
              return false;
            }

            return Boolean(value);
          })
        });
        return subject;
      });
    }
  };
});
/* eslint no-new-func:0, complexity:0 */

/* globals Cypress, cy */

exports.commands = commands;