{"version":3,"file":"bundle.js","sources":["../src/helpers/getFileBlobAsync.js","../src/error/errorTypes.js","../src/error/index.js","../src/handlers/index.js","../src/handlers/handleDragDrop.js","../src/handlers/handleInput.js","../src/index.js","../src/upload.js","../src/helpers/getValidEncoding.js"],"sourcesContent":["export default ({ fileContent, mimeType, encoding }) => {\n  const asyncEncodingToBlobGetterMap = {\n    base64: () => Cypress.Blob.base64StringToBlob(fileContent, mimeType),\n    utf8: () => Promise.resolve(fileContent),\n    default: () => Cypress.Blob.base64StringToBlob(fileContent, mimeType),\n  };\n\n  return (asyncEncodingToBlobGetterMap[encoding] || asyncEncodingToBlobGetterMap.default)();\n};\n","export default {\n  MISSING_FILENAME: {\n    message: 'Error: fileName is empty.',\n    tip: 'You should provide valid fileName string for parsing',\n  },\n  MISSING_ENCODING: {\n    message: 'Error: file encoding could not be determined automatically.',\n    tip: 'You should either recheck filename for any typos or provide the encoding for such file type manually.',\n  },\n};\n","import ERR_TYPES from './errorTypes';\n\nclass InternalError extends Error {\n  constructor(errorType, ...params) {\n    super(...params);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, InternalError);\n    }\n\n    this.name = '[cypress-file-upload::InternalError]';\n    this.message = `${errorType.message} ${errorType.tip}`;\n  }\n}\n\nexport { ERR_TYPES, InternalError };\n","import handleDragDrop from './handleDragDrop';\nimport handleInput from './handleInput';\n\nconst handlerMap = {\n  'drag-n-drop': handleDragDrop,\n  input: handleInput,\n};\n\nconst getHandler = subjectType => handlerMap[subjectType];\n\nexport { handleDragDrop, handleInput, getHandler };\n","export default ({ subject }, { files }) =>\n  cy.wrap(subject, { log: false }).trigger('drop', {\n    dataTransfer: {\n      files,\n      types: ['Files'],\n    },\n  });\n","export default ({ window, subject }, { files, force }) => {\n  const dataTransfer = new DataTransfer();\n  files.forEach(file => dataTransfer.items.add(file));\n  const input = subject[0];\n  input.files = dataTransfer.files;\n\n  if (isManualTriggerRequired()) {\n    return cy.wrap(subject, { log: false }).trigger('change', {\n      force: true,\n    });\n  }\n\n  return null;\n\n  function isManualTriggerRequired() {\n    if (force) {\n      /* https://github.com/abramenal/cypress-file-upload/issues/41 */\n      return true;\n    }\n\n    /* https://github.com/abramenal/cypress-file-upload/issues/34 */\n\n    const chromeRegExp = /(chrome\\/)(\\d+)/i;\n    const chromeMatcher = window.navigator.userAgent.match(chromeRegExp);\n\n    if (!chromeMatcher) {\n      return false;\n    }\n\n    const chromeVersion = Number.parseInt(chromeMatcher[2], 10);\n    return chromeVersion >= 73;\n  }\n};\n","import upload from './upload';\n\nexport default () => {\n  Cypress.Commands.add('upload', { prevSubject: 'element' }, upload);\n};\n","import getFileBlobAsync from './helpers/getFileBlobAsync';\nimport getValidEncoding from './helpers/getValidEncoding';\nimport { InternalError, ERR_TYPES } from './error';\n\nimport { getHandler } from './handlers';\n\nexport default (subject, fileOrArray, { subjectType = 'input', force = false }) =>\n  cy.window({ log: false }).then(async window => {\n    const filesToProcess = Array.isArray(fileOrArray) ? fileOrArray : [fileOrArray];\n    const processedFiles = await Cypress.Promise.all(\n      filesToProcess.map(async ({ fileContent, fileName, mimeType, encoding }) => {\n        if (!fileName) {\n          throw new InternalError(ERR_TYPES.MISSING_FILENAME);\n        }\n\n        const validEncoding = encoding || getValidEncoding(fileName);\n        if (!validEncoding) {\n          throw new InternalError(ERR_TYPES.MISSING_ENCODING);\n        }\n\n        const blob = await getFileBlobAsync({ fileContent, mimeType, encoding: validEncoding });\n        return new window.File([blob], fileName, { type: mimeType });\n      }),\n    );\n\n    Cypress.log({\n      name: 'upload',\n      displayName: 'UPLOAD',\n      message: filesToProcess.map(i => i.fileName).join(', '),\n      consoleProps: () => ({\n        subjectType,\n        files: filesToProcess,\n        force,\n      }),\n    });\n\n    const handleFileUpload = getHandler(subjectType);\n    return handleFileUpload({ window, subject }, { files: processedFiles, force });\n  });\n","import { InternalError, ERR_TYPES } from '../error';\n\nexport default fileName => {\n  /*\n   * Copied from https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/fixture.coffee#L94\n   */\n  const extensionToEncodingMap = {\n    json: 'utf8',\n    js: 'utf8',\n    coffee: 'utf8',\n    html: 'utf8',\n    txt: 'utf8',\n    csv: 'utf8',\n    png: 'base64',\n    jpg: 'base64',\n    jpeg: 'base64',\n    gif: 'base64',\n    tif: 'base64',\n    tiff: 'base64',\n    zip: 'base64',\n\n    /*\n     * Other extensions that are not supported by cy.fixture by default:\n     */\n    pdf: 'utf8',\n    vcf: 'utf8',\n  };\n\n  const extension = fileName.slice(fileName.lastIndexOf('.') + 1);\n\n  if (extensionToEncodingMap[extension]) {\n    return extensionToEncodingMap[extension];\n  }\n\n  throw new InternalError(ERR_TYPES.MISSING_ENCODING);\n};\n"],"names":["message","tip","InternalError","constructor","errorType","this","params","Error","captureStackTrace","name","handlerMap","ref","ref$1","cy","wrap","log","trigger","dataTransfer","files","types","input","DataTransfer","forEach","file","items","add","subject","force","chromeMatcher","window","navigator","userAgent","match","Number","parseInt","isManualTriggerRequired","Cypress","Commands","prevSubject","fileOrArray","then","filesToProcess","Array","isArray","Promise","all","map","fileName","ERR_TYPES","validEncoding","encoding","extensionToEncodingMap","json","js","coffee","html","txt","csv","png","jpg","jpeg","gif","tif","tiff","zip","pdf","vcf","extension","slice","lastIndexOf","getValidEncoding","asyncEncodingToBlobGetterMap","base64","Blob","base64StringToBlob","fileContent","mimeType","utf8","resolve","default","getFileBlobAsync","blob","File","type","processedFiles","displayName","i","join","consoleProps","subjectType","getHandler","handleFileUpload"],"mappings":"AAAA,MCCoB,CAChBA,QAAS,4BACTC,IAAK,0DAEW,CAChBD,QAAS,8DACTC,IAAK,yGCLHC,cACJC,WAAYC,yEACJC,KAAGC,GAELC,EAAMC,mBACRD,EAAMC,kBAAkBH,KAAMH,QAG3BO,KAAO,4CACPT,QAAaI,cAAqBA,EAAc,2FAT7BG,OCCtBG,EAAa,wBCHHC,EAAaC,wBAC3BC,GAAGC,eAAc,CAAEC,KAAK,IAASC,QAAQ,OAAQ,CAC/CC,aAAc,OACZC,EACAC,MAAO,CAAC,aDCZC,eELcT,EAAqBC,kDAC7BK,EAAe,IAAII,oBACzBH,EAAMI,iBAAQC,UAAQN,EAAaO,MAAMC,IAAIF,KAC/BG,EAAQ,GAChBR,MAAQD,EAAaC,oBAWrBS,SAEK,MAMHC,EAAgBC,EAAOC,UAAUC,UAAUC,MAD5B,4BAGhBJ,GAIiBK,OAAOC,SAASN,EAAc,GAAI,KAChC,GAxBtBO,GACKtB,GAAGC,KAAKY,EAAS,CAAEX,KAAK,IAASC,QAAQ,SAAU,CACxDW,OAAO,IAIJ,OCTPS,QAAQC,SAASZ,IAAI,SAAU,CAAEa,YAAa,oBCGhCZ,EAASa,EAAa5B,sCAAgB,8CAAiB,GACrEE,GAAGgB,OAAO,CAAEd,KAAK,IAASyB,cAAWX,WAC7BY,EAAiBC,MAAMC,QAAQJ,GAAeA,EAAc,CAACA,0BACtCH,QAAQQ,QAAQC,IAC3CJ,EAAeK,aAAWnC,sEACnBoC,QACG,IAAI7C,EAAc8C,OAGpBC,EAAgBC,YCbfH,OAIPI,EAAyB,CAC7BC,KAAM,OACNC,GAAI,OACJC,OAAQ,OACRC,KAAM,OACNC,IAAK,OACLC,IAAK,OACLC,IAAK,SACLC,IAAK,SACLC,KAAM,SACNC,IAAK,SACLC,IAAK,SACLC,KAAM,SACNC,IAAK,SAKLC,IAAK,OACLC,IAAK,QAGDC,EAAYpB,EAASqB,MAAMrB,EAASsB,YAAY,KAAO,MAEzDlB,EAAuBgB,UAClBhB,EAAuBgB,SAG1B,IAAIjE,EAAc8C,GDnBgBsB,CAAiBvB,OAC9CE,QACG,IAAI/C,EAAc8C,mCPjBlBrC,oCACR4D,EAA+B,CACnCC,yBAAcpC,QAAQqC,KAAKC,mBAAmBC,EAAaC,IAC3DC,uBAAYjC,QAAQkC,QAAQH,IAC5BI,0BAAe3C,QAAQqC,KAAKC,mBAAmBC,EAAaC,YAGtDL,eAA0CA,EAA6BQ,WOatDC,CAAiB,aAAEL,WAAaC,EAAU1B,SAAUD,mBAAjEgC,UACC,IAAIpD,EAAOqD,KAAK,CAACD,GAAOlC,EAAU,CAAEoC,KAAMP,2DAZ/CQ,UAgBNhD,QAAQrB,IAAI,CACVN,KAAM,SACN4E,YAAa,SACbrF,QAASyC,EAAeK,aAAIwC,UAAKA,EAAEvC,WAAUwC,KAAK,MAClDC,2CACEC,EACAvE,MAAOuB,QACPd,eJxBW8D,UAAe/E,EAAW+E,GI4BhBC,CAAWD,EAC7BE,CAAiB,QAAE9D,UAAQH,GAAW,CAAER,MAAOkE,QAAgBzD"}