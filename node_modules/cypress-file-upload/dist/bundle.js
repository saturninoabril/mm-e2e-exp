var e={message:"Error: fileName is empty.",tip:"You should provide valid fileName string for parsing"},r={message:"Error: file encoding could not be determined automatically.",tip:"You should either recheck filename for any typos or provide the encoding for such file type manually."},t=function(e){function r(t){for(var n=[],o=arguments.length-1;o-- >0;)n[o]=arguments[o+1];e.apply(this,n),e.captureStackTrace&&e.captureStackTrace(this,r),this.name="[cypress-file-upload::InternalError]",this.message=t.message+" "+t.tip}return e&&(r.__proto__=e),(r.prototype=Object.create(e&&e.prototype)).constructor=r,r}(Error),n={"drag-n-drop":function(e,r){var t=r.files;return cy.wrap(e.subject,{log:!1}).trigger("drop",{dataTransfer:{files:t,types:["Files"]}})},input:function(e,r){var t=e.window,n=e.subject,o=r.files,i=r.force,a=new DataTransfer;return o.forEach(function(e){return a.items.add(e)}),n[0].files=a.files,function(){if(i)return!0;var e=t.navigator.userAgent.match(/(chrome\/)(\d+)/i);return!!e&&Number.parseInt(e[2],10)>=73}()?cy.wrap(n,{log:!1}).trigger("change",{force:!0}):null}};Cypress.Commands.add("upload",{prevSubject:"element"},function(o,i,a){var s=a.subjectType;void 0===s&&(s="input");var u=a.force;return void 0===u&&(u=!1),cy.window({log:!1}).then(function(a){try{var f=Array.isArray(i)?i:[i];return Promise.resolve(Cypress.Promise.all(f.map(function(n){var o=n.fileContent,i=n.fileName,s=n.mimeType,u=n.encoding;try{if(!i)throw new t(e);var f=u||function(e){var n={json:"utf8",js:"utf8",coffee:"utf8",html:"utf8",txt:"utf8",csv:"utf8",png:"base64",jpg:"base64",jpeg:"base64",gif:"base64",tif:"base64",tiff:"base64",zip:"base64",pdf:"utf8",vcf:"utf8"},o=e.slice(e.lastIndexOf(".")+1);if(n[o])return n[o];throw new t(r)}(i);if(!f)throw new t(r);return Promise.resolve(function(e){var r=e.fileContent,t=e.mimeType,n={base64:function(){return Cypress.Blob.base64StringToBlob(r,t)},utf8:function(){return Promise.resolve(r)},default:function(){return Cypress.Blob.base64StringToBlob(r,t)}};return(n[e.encoding]||n.default)()}({fileContent:o,mimeType:s,encoding:f})).then(function(e){return new a.File([e],i,{type:s})})}catch(e){return Promise.reject(e)}}))).then(function(e){return Cypress.log({name:"upload",displayName:"UPLOAD",message:f.map(function(e){return e.fileName}).join(", "),consoleProps:function(){return{subjectType:s,files:f,force:u}}}),function(e){return n[e]}(s)({window:a,subject:o},{files:e,force:u})})}catch(e){return Promise.reject(e)}})});
//# sourceMappingURL=bundle.js.map
